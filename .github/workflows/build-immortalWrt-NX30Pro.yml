name: Build immortalWrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      my-input:
        description: "Select a device"
        type: choice
        options:
          - "h3c_nx30pro"
          - "xiaomi_mi-router-ax3000t-stock"
          - "xiaomi_mi-router-ax3000t"
        required: true
        default: "h3c_nx30pro"
  watch:
    types: [started]

env:
  REPO_URL: https://github.com/hanwckf/immortalwrt-mt798x.git
  REPO_BRANCH: openwrt-21.02
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  LAST_SHORT_HASH:

jobs:
  build:
    runs-on: Ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Initialize the compilation environment [初始化环境]
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo bash -c 'bash <(curl -s -L https://build-scripts.immortalwrt.eu.org/init_build_environment.sh)'
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo -E apt-get -qq install libfuse-dev
          sudo timedatectl set-timezone "$TZ"

      - name: Clone source code [克隆项目]
        run: |
          df -hT $PWD
          git clone $REPO_URL -b $REPO_BRANCH build
          cd build
          useVersionInfo=$(git show -s --date=short --format="Author: %an<br/>date: %cd<br/>commit: %s<br/>commit hash: %H<br/>")
          echo "useVersionInfo=$useVersionInfo" >> $GITHUB_ENV
          echo "LAST_SHORT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Cache
        if: steps.checkNeed.outputs.status == 'success'
        uses: klever1988/cachewrtbuild@main
        with:
          ccache: "true"
          prefix: ${{ github.workspace }}/build

      - name: Update feeds [更新配置]
        if: steps.checkNeed.outputs.status == 'success'
        run: |
          cd build
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Modify default ip
        if: steps.checkNeed.outputs.status == 'success'
        run: |
          cd build
          sed -i 's/192.168.1.1/192.168.15.1/g' package/base-files/files/bin/config_generate
          sed -i "s/luci-theme-bootstrap/luci-theme-argon/g" $(find feeds/luci/collections/ -type f -name "Makefile")

      - name: Replace configuration file [替换.config文件]
        if: steps.checkNeed.outputs.status == 'success'
        run: |
          cd build
          rm -f ./.config*
          cp ${GITHUB_WORKSPACE}/.config .
          # sed -i 's/h3c_nx30pro/${{ github.event.inputs.my-input }}/g' .config

      - name: Update feeds again
        if: steps.checkNeed.outputs.status == 'success'
        run: cd build && ./scripts/feeds update -a && ./scripts/feeds install -a

      - name: Download package [依赖处理]
        id: package
        if: steps.checkNeed.outputs.status == 'success'
        run: |
          cd build
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile the firmware [进行编译]
        id: compile
        if: steps.checkNeed.outputs.status == 'success'
        run: |
          cd build
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 || make -j1 V=s
          echo "::set-output name=status::success"
          grep '^CONFIG_TARGET_DEVICE_mediatek_mt7981_DEVICE_h3c_nx30pro' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y-%m-%d %H%M")" >> $GITHUB_ENV

      - name: Check space usage [检查磁盘状态]
        if: steps.checkNeed.outputs.status == 'success' && (!cancelled())
        run: df -hT

      - name: Upload bin directory [上传bin]
        uses: actions/upload-artifact@main
        if: steps.checkNeed.outputs.status == 'success' && steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
        with:
          name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: build/bin

      - name: Organize files[文件打包]
        id: organize
        if: steps.checkNeed.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          cd $GITHUB_WORKSPACE/build/bin/targets/*/*
          rm -rf packages
          find . -type f ! -name '*.bin' -exec rm -f {} \;
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "::set-output name=status::success"
          echo "::set-output name=release_tag::$(date +"%Y-%m-%d %H%M")"

      - name: Calculate MD5 [计算MD5]
        if: steps.checkNeed.outputs.status == 'success'
        run: |
          cd ${{ env.FIRMWARE }} && rm -rf sha256sums
          MD5=$(md5sum * | awk '{ print $2 " " $1 }' | sed ':a;N;$!ba;s/\n/<br>/g')
          echo "MD5=$MD5" >> $GITHUB_ENV

      - name: Upload firmware directory [上传固件]
        uses: actions/upload-artifact@main
        if: steps.checkNeed.outputs.status == 'success' && steps.organize.outputs.status == 'success' && !cancelled()
        with:
          name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      # - name: Send File to Telegram
      #   uses: appleboy/telegram-action@master
      #   if: steps.checkNeed.outputs.status == 'success'
      #   with:
      #     to: ${{ secrets.TELEGRAM_CHAT_ID }}
      #     token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      #     message: "File"
      #     document: ${{ env.FIRMWARE }}/*

      - name: Prepare release tag
        id: release_tag
        if: steps.checkNeed.outputs.status == 'success'
        run: |
          DATE_PREFIX=$(date +%y%m%d)
          echo "::set-output name=date_prefix::${DATE_PREFIX}"

      - name: Process Input
        id: process
        run: echo "::set-output name=model_name::$(echo ${{ github.event.inputs.my-input }} | tr '_' '-')"

      # - name: Upload OpenWrt Firmware to Release [Release发布]
      #   id: release
      #   uses: ncipollo/release-action@v1
      #   if: steps.checkNeed.outputs.status == 'success' && steps.organize.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      #   with:
      #     name: R${{ steps.organize.outputs.release_tag }}-${{ steps.process.outputs.model_name }}-${{ env.LAST_SHORT_HASH }}
      #     allowUpdates: true
      #     removeArtifacts: true
      #     tag: ${{ steps.release_tag.outputs.date_prefix }}-${{ steps.process.outputs.model_name }}-${{ env.LAST_SHORT_HASH }}
      #     commit: main
      #     token: ${{ secrets.GH_TOKEN }}
      #     artifacts: ${{ env.FIRMWARE }}/*
      #     body: |
      #       - 本项目是基于Hanwckf源代码编译，**当前选择编译适用于${{ github.event.inputs.my-input }}设备**，无任何第三方软件包。
      #       - 历史版本将自动保留在下方。
      #       - 默认IP：192.168.15.1
      #       - 默认账号：root
      #       - 默认密码：(空)
      #       - Head Hash比对 当前:${{ env.LAST_SHORT_HASH }} / 源码更新详情[点击这里查看](${{ env.REPO_URL }}/commits/${{ env.REPO_BRANCH }})
      #       - **请仔细检查MD5以确保完整性后再进行刷入！**
      #       - 升级更新选择sysupgrade.bin,出厂设置请刷factory.bin。
      #       - 升级前先下载备份，升级后还原备份后重新安装需要的插件即可。

      #       `md5信息`
      #       > ${{ env.MD5 }}
      #       - **如果您觉得该项目对您有帮助并愿意打赏,欢迎您捐助打赏，请点击<a href="https://raw.githubusercontent.com/zaoanshijie/NX30Pro-immortalwrt-bulid/main/zfb.jpg" target="_blank" rel="noopener">这里</a>**

      # - name: Update latest tag
      #   if: steps.checkNeed.outputs.status == 'success'
      #   run: |
      #     git config --local user.email "zaoanshijie@gmail.com"
      #     git config --local user.name "zaoanshijie"
      #     git pull --unshallow
      #     git tag -f latest ${{ steps.release_tag.outputs.date_prefix }}-${{ steps.process.outputs.model_name }}-${{ env.LAST_SHORT_HASH }}
      #     git push origin --tags -f
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
